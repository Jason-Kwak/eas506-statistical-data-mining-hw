loadings(pcaDup)
summary(pcaDup)
rm(list=ls())
#install.packages("uskewFactors")
#install.packages("ggfortify")
library(ggfortify)
library(uskewFactors)
library(mclust)
data = banknote
data$Y = as.numeric(data$Y)
autoplot(prcomp(data))
autoplot(prcomp(data[1:100,]))
autoplot(prcomp(data[101:200,]))
pairs(data)
pcaFull = prcomp(data)
pcaFull = princomp(data[,-7])
loadings(pcaFull)
summary(pcaFull)
pcaOrginal = princomp(data[1:100,-7])
loadings(pcaOrginal)
summary(pcaOrginal)
pcaDup = princomp(data[101:200,-7])
loadings(pcaDup)
summary(pcaDup)
load("~/Course Material/EAS506 - Stat Data Mining/Homework/Homework 5/Question 5/SwissBankNotes.rdata")
setwd("~/Course Material/EAS506 - Stat Data Mining/Homework/Homework 4/Question 3")
setwd("~/Course Material/EAS506 - Stat Data Mining/Homework/Homework 5/Question 5")
load.Rdata("SwissBankNotes.Rdata", data)
load.Rdata(filename="SwissBankNotes.Rdata", data)
load.Rdata2(filename="SwissBankNotes.Rdata", data)
load.Rdata2(filename="SwissBankNotes.rdata", data)
data <- load("SwissBankNotes.rdata")
getwd()
rm(list=ls())
setwd("C:/Users/paul_/Documents/Course Material/EAS506 - Stat Data Mining/Homework/Homework 5/Question 5")
#install.packages("uskewFactors")
#install.packages("ggfortify")
library(ggfortify)
library(uskewFactors)
library(mclust)
data <- load("SwissBankNotes.rdata")
rm(list=ls())
setwd("C:/Users/paul_/Documents/Course Material/EAS506 - Stat Data Mining/Homework/Homework 5/Question 5")
#install.packages("uskewFactors")
#install.packages("ggfortify")
library(ggfortify)
library(uskewFactors)
library(mclust)
data <- load("SwissBankNotes.rdata")
rm(list=ls())
setwd("C:/Users/paul_/Documents/Course Material/EAS506 - Stat Data Mining/Homework/Homework 5/Question 5")
#install.packages("uskewFactors")
#install.packages("ggfortify")
library(ggfortify)
library(uskewFactors)
library(mclust)
data <- load("SwissBankNotes.rdata")
load("~/Course Material/EAS506 - Stat Data Mining/Homework/Homework 5/Question 5/SwissBankNotes.rdata")
View(SwissBankNotes)
View(SwissBankNotes)
data <- SwissBankNotes
data$Y = as.numeric(data$Y)
autoplot(prcomp(data))
autoplot(prcomp(data[1:100,]))
autoplot(prcomp(data[101:200,]))
pairs(data)
pcaFull = prcomp(data)
pcaFull = princomp(data[,-7])
loadings(pcaFull)
summary(pcaFull)
pcaOrginal = princomp(data[1:100,-7])
loadings(pcaOrginal)
summary(pcaOrginal)
pcaDup = princomp(data[101:200,-7])
loadings(pcaDup)
summary(pcaDup)
############################################################################################
##
## HW5 Question 5
##
## Author: Paul M Girdler
## Created: December 16, 2018
##
############################################################################################
rm(list=ls())
setwd("C:/Users/paul_/Documents/Course Material/EAS506 - Stat Data Mining/Homework/Homework 5/Question 5")
#install.packages("uskewFactors")
#install.packages("ggfortify")
library(ggfortify)
library(uskewFactors)
library(mclust)
data <- SwissBankNotes
data$Y = as.numeric(data$Y)
autoplot(prcomp(data))
autoplot(prcomp(data[1:100,]))
autoplot(prcomp(data[101:200,]))
pairs(data)
pcaFull = prcomp(data)
pcaFull = princomp(data[,-7])
loadings(pcaFull)
summary(pcaFull)
pcaOrginal = princomp(data[1:100,-7])
loadings(pcaOrginal)
summary(pcaOrginal)
pcaDup = princomp(data[101:200,-7])
loadings(pcaDup)
summary(pcaDup)
load("~/Course Material/EAS506 - Stat Data Mining/Homework/Homework 5/Question 5/SwissBankNotes.rdata")
setwd("C:/Users/paul_/Documents/Course Material/EAS506 - Stat Data Mining/Homework/Homework 5/Question 5")
#install.packages("uskewFactors")
#install.packages("ggfortify")
library(ggfortify)
library(uskewFactors)
library(mclust)
data <- SwissBankNotes
data$Y = as.numeric(data$Y)
autoplot(prcomp(data))
autoplot(prcomp(data[1:100,]))
autoplot(prcomp(data[101:200,]))
pairs(data)
pcaFull = prcomp(data)
pcaFull = princomp(data[,-7])
loadings(pcaFull)
summary(pcaFull)
pcaOrginal = princomp(data[1:100,-7])
loadings(pcaOrginal)
summary(pcaOrginal)
pcaDup = princomp(data[101:200,-7])
loadings(pcaDup)
summary(pcaDup)
autoplot(prcomp(data[1:100,]))
autoplot(prcomp(data[101:200,]))
############################################################################################
##
## HW5 Question 2
##
## Author: Paul M Girdler
## Created: December 16, 2018
##
############################################################################################
rm(list=ls())
library(ElemStatLearn)
library(neuralnet)
library(plyr)
library(ggplot2)
data(spam)
spam_train = sample(1:nrow(spam), nrow(spam)*0.67)
spam_test = -spam_train
spam_train_data = spam[spam_train, ]
spam_test_data = spam[spam_test, ]
n <- names(spam_train_data)
f <- as.formula(paste("spam ~", paste(n[!n %in% "spam"], collapse = " + ")))
set.seed(123123)
p <- 8
nn.error.store <- data.frame(index=integer(),error=double())
pbar <- create_progress_bar('text')
pbar$init(p)
for(i in 1:p){
nn <- neuralnet(f,data=data.matrix(spam_train_data),hidden=i,threshold = 0.1)
nn_pred = round(compute(nn,spam_test_data[,1:57])$net.result[,1])
spam_test_data1      <- spam_test_data
spam_test_data1$spam <- as.character(spam_test_data1$spam)
spam_test_data1$spam[spam_test_data1$spam=="email"] <- 1
spam_test_data1$spam[spam_test_data1$spam=="spam"]  <- 2
nn.error.store[i,1] <- i
nn.error.store[i,2] <- mean(spam_test_data1$spam != nn_pred)
pbar$step()
}
plot(nn.error.store, xlab="Neurons", ylab="Error", type = 'l',main="Test Error")
ggplot(data=nn.error.store, aes(x = index, y = error*100)) +
geom_line() +
ggtitle("Comparison of Error again No. of Hidden Nodes") +
labs(title="Error",x="Hidden Nodes n", y = "Error (%)") +
xlim(1,8) +
ylim(0,15)
which(nn.error.store == min(nn.error.store))
min(nn.error.store)
View(spam_test_data)
View(spam_test_data)
rm(list=ls())
library(ElemStatLearn)
library(neuralnet)
library(plyr)
library(ggplot2)
data(spam)
spam_train = sample(1:nrow(spam), nrow(spam)*0.80)
spam_test = -spam_train
spam_train_data = spam[spam_train, ]
spam_test_data = spam[spam_test, ]
n <- names(spam_train_data)
f <- as.formula(paste("spam ~", paste(n[!n %in% "spam"], collapse = " + ")))
set.seed(123123)
p <- 20
nn.error.store <- data.frame(index=integer(),error=double())
pbar <- create_progress_bar('text')
pbar$init(p)
for(i in 1:p){
nn <- neuralnet(f,data=data.matrix(spam_train_data),hidden=i,threshold = 0.2)
nn_pred = round(compute(nn,spam_test_data[,1:57])$net.result[,1])
spam_test_data1      <- spam_test_data
spam_test_data1$spam <- as.character(spam_test_data1$spam)
spam_test_data1$spam[spam_test_data1$spam=="email"] <- 1
spam_test_data1$spam[spam_test_data1$spam=="spam"]  <- 2
nn.error.store[i,1] <- i
nn.error.store[i,2] <- mean(spam_test_data1$spam != nn_pred)
pbar$step()
}
############################################################################################
##
## HW5 Question 2
##
## Author: Paul M Girdler
## Created: December 16, 2018
##
############################################################################################
rm(list=ls())
library(ElemStatLearn)
library(neuralnet)
library(plyr)
library(ggplot2)
data(spam)
spam_train = sample(1:nrow(spam), nrow(spam)*0.80)
spam_test = -spam_train
spam_train_data = spam[spam_train, ]
spam_test_data = spam[spam_test, ]
n <- names(spam_train_data)
f <- as.formula(paste("spam ~", paste(n[!n %in% "spam"], collapse = " + ")))
set.seed(1234)
p <- 10
nn.error.store <- data.frame(index=integer(),error=double())
pbar <- create_progress_bar('text')
pbar$init(p)
for(i in 1:p){
nn <- neuralnet(f,data=data.matrix(spam_train_data),hidden=i,threshold = 0.2)
nn_pred = round(compute(nn,spam_test_data[,1:57])$net.result[,1])
spam_test_data1      <- spam_test_data
spam_test_data1$spam <- as.character(spam_test_data1$spam)
spam_test_data1$spam[spam_test_data1$spam=="email"] <- 1
spam_test_data1$spam[spam_test_data1$spam=="spam"]  <- 2
nn.error.store[i,1] <- i
nn.error.store[i,2] <- mean(spam_test_data1$spam != nn_pred)
pbar$step()
}
View(nn.error.store)
View(nn.error.store)
neuralnet(f,data=data.matrix(spam_train_data),hidden=2,threshold = 0.2)
View(nn)
View(nn)
nn$net.result
nn$result.matrix
nn$net.result[[1]]
############################################################################################
##
## HW5 Question 2
##
## Author: Paul M Girdler
## Created: December 16, 2018
##
############################################################################################
rm(list=ls())
library(ElemStatLearn)
library(neuralnet)
library(plyr)
library(ggplot2)
data(spam)
spam_train = sample(1:nrow(spam), nrow(spam)*0.80)
spam_test = -spam_train
spam_train_data = spam[spam_train, ]
spam_test_data = spam[spam_test, ]
n <- names(spam_train_data)
f <- as.formula(paste("spam ~", paste(n[!n %in% "spam"], collapse = " + ")))
set.seed(1234)
p <- 8
nn.error.store <- data.frame(index=integer(),trainerror=double(),testerror=double())
pbar <- create_progress_bar('text')
pbar$init(p)
for(i in 1:p){
nn <- neuralnet(f,data=data.matrix(spam_train_data),hidden=i,threshold = 0.2)
nn_pred = round(compute(nn,spam_test_data[,1:57])$net.result[,1])
spam_test_data1      <- spam_test_data
spam_test_data1$spam <- as.character(spam_test_data1$spam)
spam_test_data1$spam[spam_test_data1$spam=="email"] <- 1
spam_test_data1$spam[spam_test_data1$spam=="spam"]  <- 2
nn.error.store[i,1] <- i
nn.error.store[i,2]  <- mean(spam_train_data1$spam != nn$net.result[[1]])
nn.error.store[i,3] <- mean(spam_test_data1$spam != nn_pred)
pbar$step()
}
plot(nn.error.store, xlab="Neurons", ylab="Error", type = 'l',main="Test Error")
ggplot(data=nn.error.store, aes(x = index, y = error*100)) +
geom_line() +
ggtitle("Comparison of Error again No. of Hidden Nodes") +
labs(title="Error - Comparison of Number of Hidden Nodes n",x="Hidden Nodes n", y = "Error (%)") +
xlim(1,8) +
ylim(0,15)
which(nn.error.store == min(nn.error.store))
min(nn.error.store)
############################################################################################
##
## HW5 Question 2
##
## Author: Paul M Girdler
## Created: December 16, 2018
##
############################################################################################
rm(list=ls())
library(ElemStatLearn)
library(neuralnet)
library(plyr)
library(ggplot2)
data(spam)
spam_train = sample(1:nrow(spam), nrow(spam)*0.80)
spam_test = -spam_train
spam_train_data = spam[spam_train, ]
spam_test_data = spam[spam_test, ]
n <- names(spam_train_data)
f <- as.formula(paste("spam ~", paste(n[!n %in% "spam"], collapse = " + ")))
set.seed(1234)
p <- 8
nn.error.store <- data.frame(index=integer(),trainerror=double(),testerror=double())
pbar <- create_progress_bar('text')
pbar$init(p)
for(i in 1:p){
nn <- neuralnet(f,data=data.matrix(spam_train_data),hidden=i,threshold = 0.2)
nn_pred = round(compute(nn,spam_test_data[,1:57])$net.result[,1])
spam_test_data1      <- spam_test_data
spam_test_data1$spam <- as.character(spam_test_data1$spam)
spam_test_data1$spam[spam_test_data1$spam=="email"] <- 1
spam_test_data1$spam[spam_test_data1$spam=="spam"]  <- 2
nn.error.store[i,1] <- i
nn.error.store[i,2]  <- mean(spam_train_data1$spam != nn$net.result[,1])
nn.error.store[i,3] <- mean(spam_test_data1$spam != nn_pred)
pbar$step()
}
plot(nn.error.store, xlab="Neurons", ylab="Error", type = 'l',main="Test Error")
ggplot(data=nn.error.store, aes(x = index, y = error*100)) +
geom_line() +
ggtitle("Comparison of Error again No. of Hidden Nodes") +
labs(title="Error - Comparison of Number of Hidden Nodes n",x="Hidden Nodes n", y = "Error (%)") +
xlim(1,8) +
ylim(0,15)
which(nn.error.store == min(nn.error.store))
min(nn.error.store)
nn$net.result[1]
nn$net.result[,1]
############################################################################################
##
## HW5 Question 2
##
## Author: Paul M Girdler
## Created: December 16, 2018
##
############################################################################################
rm(list=ls())
library(ElemStatLearn)
library(neuralnet)
library(plyr)
library(ggplot2)
data(spam)
spam_train = sample(1:nrow(spam), nrow(spam)*0.80)
spam_test = -spam_train
spam_train_data = spam[spam_train, ]
spam_test_data = spam[spam_test, ]
n <- names(spam_train_data)
f <- as.formula(paste("spam ~", paste(n[!n %in% "spam"], collapse = " + ")))
set.seed(1234)
p <- 8
nn.error.store <- data.frame(index=integer(),trainerror=double(),testerror=double())
pbar <- create_progress_bar('text')
pbar$init(p)
for(i in 1:p){
nn <- neuralnet(f,data=data.matrix(spam_train_data),hidden=i,threshold = 0.2)
nn_pred = round(compute(nn,spam_test_data[,1:57])$net.result[,1])
spam_test_data1      <- spam_test_data
spam_test_data1$spam <- as.character(spam_test_data1$spam)
spam_test_data1$spam[spam_test_data1$spam=="email"] <- 1
spam_test_data1$spam[spam_test_data1$spam=="spam"]  <- 2
nn.error.store[i,1] <- i
nn.error.store[i,2]  <- mean(spam_train_data1$spam != nn$net.result[1])
nn.error.store[i,3] <- mean(spam_test_data1$spam != nn_pred)
pbar$step()
}
############################################################################################
##
## HW5 Question 2
##
## Author: Paul M Girdler
## Created: December 16, 2018
##
############################################################################################
rm(list=ls())
library(ElemStatLearn)
library(neuralnet)
library(plyr)
library(ggplot2)
data(spam)
spam_train = sample(1:nrow(spam), nrow(spam)*0.80)
spam_test = -spam_train
spam_train_data = spam[spam_train, ]
spam_test_data = spam[spam_test, ]
n <- names(spam_train_data)
f <- as.formula(paste("spam ~", paste(n[!n %in% "spam"], collapse = " + ")))
set.seed(1234)
p <- 8
nn.error.store <- data.frame(index=integer(),trainerror=double(),testerror=double())
pbar <- create_progress_bar('text')
pbar$init(p)
for(i in 1:p){
nn <- neuralnet(f,data=data.matrix(spam_train_data),hidden=i,threshold = 0.2)
nn_pred = round(compute(nn,spam_train_data[,1:57])$net.result[,1])
nn_pred = round(compute(nn,spam_test_data[,1:57])$net.result[,1])
spam_train_data1      <- spam_train_data
spam_train_data1$spam <- as.character(spam_train_data1$spam)
spam_train_data1$spam[spam_train_data1$spam=="email"] <- 1
spam_train_data1$spam[spam_train_data1$spam=="spam"]  <- 2
spam_test_data1      <- spam_test_data
spam_test_data1$spam <- as.character(spam_test_data1$spam)
spam_test_data1$spam[spam_test_data1$spam=="email"] <- 1
spam_test_data1$spam[spam_test_data1$spam=="spam"]  <- 2
nn.error.store[i,1] <- i
nn.error.store[i,2]  <- mean(spam_train_data1$spam != nn_pred)
nn.error.store[i,3] <- mean(spam_test_data1$spam != nn_pred)
pbar$step()
}
plot(nn.error.store, xlab="Neurons", ylab="Error", type = 'l',main="Test Error")
ggplot(data=nn.error.store, aes(x = index, y = error*100)) +
geom_line() +
ggtitle("Comparison of Error again No. of Hidden Nodes") +
labs(title="Error - Comparison of Number of Hidden Nodes n",x="Hidden Nodes n", y = "Error (%)") +
xlim(1,8) +
ylim(0,15)
which(nn.error.store == min(nn.error.store))
min(nn.error.store)
View(nn.error.store)
View(nn.error.store)
############################################################################################
##
## HW5 Question 2
##
## Author: Paul M Girdler
## Created: December 16, 2018
##
############################################################################################
rm(list=ls())
library(ElemStatLearn)
library(neuralnet)
library(plyr)
library(ggplot2)
data(spam)
spam_train = sample(1:nrow(spam), nrow(spam)*0.80)
spam_test = -spam_train
spam_train_data = spam[spam_train, ]
spam_test_data = spam[spam_test, ]
n <- names(spam_train_data)
f <- as.formula(paste("spam ~", paste(n[!n %in% "spam"], collapse = " + ")))
set.seed(1234)
p <- 6
nn.error.store <- data.frame(index=integer(),trainerror=double(),testerror=double())
pbar <- create_progress_bar('text')
pbar$init(p)
for(i in 1:p){
nn <- neuralnet(f,data=data.matrix(spam_train_data),hidden=i,threshold = 0.2)
nn_pred1 = round(compute(nn,spam_train_data[,1:57])$net.result[,1])
nn_pred2 = round(compute(nn,spam_test_data[,1:57])$net.result[,1])
spam_train_data1      <- spam_train_data
spam_train_data1$spam <- as.character(spam_train_data1$spam)
spam_train_data1$spam[spam_train_data1$spam=="email"] <- 1
spam_train_data1$spam[spam_train_data1$spam=="spam"]  <- 2
spam_test_data1      <- spam_test_data
spam_test_data1$spam <- as.character(spam_test_data1$spam)
spam_test_data1$spam[spam_test_data1$spam=="email"] <- 1
spam_test_data1$spam[spam_test_data1$spam=="spam"]  <- 2
nn.error.store[i,1] <- i
nn.error.store[i,2]  <- mean(spam_train_data1$spam != nn_pred1)
nn.error.store[i,3] <- mean(spam_test_data1$spam != nn_pred2)
pbar$step()
}
ggplot(data=nn.error.store, aes(x = index, y = trainerror*100)) +
geom_line() +
ggtitle("Comparison of Error again No. of Hidden Nodes") +
labs(title="Error - Comparison of Number of Hidden Nodes n",x="Hidden Nodes n", y = "Error (%)") +
xlim(1,8) +
ylim(0,15)
ggplot(data=nn.error.store, aes(x = index, y = trainerror*100)) +
geom_line() +
ggtitle("Comparison of Error again No. of Hidden Nodes") +
labs(title="Error - Comparison of Number of Hidden Nodes n",x="Hidden Nodes n", y = "Error (%)") +
xlim(1,6) +
ylim(0,15)
ggplot(data=nn.error.store, aes(x = index, y = trainerror*100)) +
geom_line() +
ggtitle("Comparison of Training Error again No. of Hidden Nodes") +
labs(title="Error - Comparison of Number of Hidden Nodes n",x="Hidden Nodes n", y = "Error (%)") +
xlim(1,6) +
ylim(0,15)
ggplot(data=nn.error.store, aes(x = index, y = testerror*100)) +
geom_line() +
ggtitle("Comparison of Test Error again No. of Hidden Nodes") +
labs(title="Error - Comparison of Number of Hidden Nodes n",x="Hidden Nodes n", y = "Error (%)") +
xlim(1,6) +
ylim(0,15)
ggplot(data=nn.error.store, aes(x = index, y = trainerror*100)) +
geom_line() +
labs(title="Comparison: Training Error against No. of Hidden Nodes",x="Hidden Nodes n", y = "Error (%)") +
xlim(1,6) +
ylim(0,10)
ggplot(data=nn.error.store, aes(x = index, y = testerror*100)) +
geom_line() +
ggtitle("Comparison: Test Error against No. of Hidden Nodes") +
labs(title="Error - Comparison of Number of Hidden Nodes n",x="Hidden Nodes n", y = "Error (%)") +
xlim(1,6) +
ylim(0,10)
